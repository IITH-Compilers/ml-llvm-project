# Copyright (c) 2021, S. VenkataKeerthy, Rohit Aggarwal
# Department of Computer Science and Engineering, IIT Hyderabad
#
# This software is available under the BSD 4-Clause License. Please see LICENSE
# file in the top-level directory for more details.
#
""" This script generates entity2id.txt, train2id.txt and relation2id.txt  """

# arg1 : path of the file generated by collectIR Pass

import re
import sys
import argparse
import os


def getEntityDict(config):
    ip = open(str(config.tripletFile), "r")
    content = ip.read()
    uniqueWords = set(content.split())
    ip.close()

    op = open(os.path.join(os.path.dirname(config.tripletFile), "entity2id.txt"), "w")
    i = 0
    entityDict = {}
    op.write(str(len(uniqueWords)) + "\n")
    for word in uniqueWords:
        op.write(str(word) + "\t" + str(i) + "\n")
        entityDict[str(word)] = str(i)
        i += 1
    op.close()
    return entityDict


def getRelationDict(config):
    ip = open(str(config.tripletFile), "r")
    content = ip.read()
    sentences = content.split("\n")
    maxLen = [len(sentence.strip().split("  ")) for sentence in sentences]
    maxArgs = max(maxLen) - 1
    ip.close()

    relationDict = {}

    op = open(os.path.join(os.path.dirname(config.tripletFile), "relation2id.txt"), "w")
    op.write(str(maxArgs + 3) + "\n")
    relationDict["Next"] = 0
    
    for i in range(maxArgs):
        relationDict[f"Arg{i}"] = i+1
    for k, v in relationDict:
      op.write(k + '\t' + v + '\n')
    op.close()

    return relationDict


def createTrain2ID(ed, rd, config):
    ip = open(str(config.tripletFile), "r")
    content = ip.read()
    sentences = content.split("\n")

    op = open(os.path.join(os.path.dirname(config.tripletFile), "train2id.txt"), "w")
    opc = ""
    toWrite = ""
    nol = 0
    for sentence in sentences:
        s = sentence.strip().split("  ")
        l = len(s)
        if s[0] != "":
            if opc != "":
                if s[0] not in ed:
                    print(sentence)
                    print(s)
                    print(l)
                    print(str(sentences.index(sentence)))
                    print(s[0] + " not found in ed")
                if "Next" not in rd:
                    print("Next not found in rd")
                toWrite += ed[opc] + "\t" + ed[s[0]] + "\t" + rd["Next"] + "\n"
                nol += 1
            opc = s[0]
            i = 0
            for arg in range(1, l):
                toWrite += (
                    ed[opc] + "\t" + ed[s[arg]] + "\t" + rd[f"Arg{arg}"] + "\n"
                )
                nol += 1
                i += 1
    op.write(str(nol) + "\n")
    op.write(toWrite)
    op.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--tripletFile",
        dest="tripletFile",
        metavar="FILE",
        help="Path of the triplet file generated by collectIR pass.",
        required=True,
    )
    config = parser.parse_args()

    ed = getEntityDict(config)
    rd = getRelationDict(config)
    createTrain2ID(ed, rd, config)

    print("Files are generated at the path ", os.path.dirname(config.tripletFile))
