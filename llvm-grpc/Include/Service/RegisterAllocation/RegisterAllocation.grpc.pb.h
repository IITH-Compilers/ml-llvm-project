// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RegisterAllocation.proto
#ifndef GRPC_RegisterAllocation_2eproto__INCLUDED
#define GRPC_RegisterAllocation_2eproto__INCLUDED

#include "RegisterAllocation.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace registerallocation {

// General Register Allocation Service 
class RegisterAllocation final {
 public:
  static constexpr char const* service_full_name() {
    return "registerallocation.RegisterAllocation";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // RPC function to get interference graphs
    virtual ::grpc::Status getGraphs(::grpc::ClientContext* context, const ::registerallocation::Path& request, ::registerallocation::GraphList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::registerallocation::GraphList>> AsyncgetGraphs(::grpc::ClientContext* context, const ::registerallocation::Path& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::registerallocation::GraphList>>(AsyncgetGraphsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::registerallocation::GraphList>> PrepareAsyncgetGraphs(::grpc::ClientContext* context, const ::registerallocation::Path& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::registerallocation::GraphList>>(PrepareAsyncgetGraphsRaw(context, request, cq));
    }
    // RPC function to send register color data for codegen
    virtual ::grpc::Status codeGen(::grpc::ClientContext* context, const ::registerallocation::ColorData& request, ::registerallocation::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::registerallocation::Empty>> AsynccodeGen(::grpc::ClientContext* context, const ::registerallocation::ColorData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::registerallocation::Empty>>(AsynccodeGenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::registerallocation::Empty>> PrepareAsynccodeGen(::grpc::ClientContext* context, const ::registerallocation::ColorData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::registerallocation::Empty>>(PrepareAsynccodeGenRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // RPC function to get interference graphs
      virtual void getGraphs(::grpc::ClientContext* context, const ::registerallocation::Path* request, ::registerallocation::GraphList* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getGraphs(::grpc::ClientContext* context, const ::registerallocation::Path* request, ::registerallocation::GraphList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getGraphs(::grpc::ClientContext* context, const ::registerallocation::Path* request, ::registerallocation::GraphList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC function to send register color data for codegen
      virtual void codeGen(::grpc::ClientContext* context, const ::registerallocation::ColorData* request, ::registerallocation::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void codeGen(::grpc::ClientContext* context, const ::registerallocation::ColorData* request, ::registerallocation::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void codeGen(::grpc::ClientContext* context, const ::registerallocation::ColorData* request, ::registerallocation::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::registerallocation::GraphList>* AsyncgetGraphsRaw(::grpc::ClientContext* context, const ::registerallocation::Path& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::registerallocation::GraphList>* PrepareAsyncgetGraphsRaw(::grpc::ClientContext* context, const ::registerallocation::Path& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::registerallocation::Empty>* AsynccodeGenRaw(::grpc::ClientContext* context, const ::registerallocation::ColorData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::registerallocation::Empty>* PrepareAsynccodeGenRaw(::grpc::ClientContext* context, const ::registerallocation::ColorData& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getGraphs(::grpc::ClientContext* context, const ::registerallocation::Path& request, ::registerallocation::GraphList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::registerallocation::GraphList>> AsyncgetGraphs(::grpc::ClientContext* context, const ::registerallocation::Path& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::registerallocation::GraphList>>(AsyncgetGraphsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::registerallocation::GraphList>> PrepareAsyncgetGraphs(::grpc::ClientContext* context, const ::registerallocation::Path& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::registerallocation::GraphList>>(PrepareAsyncgetGraphsRaw(context, request, cq));
    }
    ::grpc::Status codeGen(::grpc::ClientContext* context, const ::registerallocation::ColorData& request, ::registerallocation::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::registerallocation::Empty>> AsynccodeGen(::grpc::ClientContext* context, const ::registerallocation::ColorData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::registerallocation::Empty>>(AsynccodeGenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::registerallocation::Empty>> PrepareAsynccodeGen(::grpc::ClientContext* context, const ::registerallocation::ColorData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::registerallocation::Empty>>(PrepareAsynccodeGenRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getGraphs(::grpc::ClientContext* context, const ::registerallocation::Path* request, ::registerallocation::GraphList* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getGraphs(::grpc::ClientContext* context, const ::registerallocation::Path* request, ::registerallocation::GraphList* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getGraphs(::grpc::ClientContext* context, const ::registerallocation::Path* request, ::registerallocation::GraphList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void codeGen(::grpc::ClientContext* context, const ::registerallocation::ColorData* request, ::registerallocation::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void codeGen(::grpc::ClientContext* context, const ::registerallocation::ColorData* request, ::registerallocation::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void codeGen(::grpc::ClientContext* context, const ::registerallocation::ColorData* request, ::registerallocation::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::registerallocation::GraphList>* AsyncgetGraphsRaw(::grpc::ClientContext* context, const ::registerallocation::Path& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::registerallocation::GraphList>* PrepareAsyncgetGraphsRaw(::grpc::ClientContext* context, const ::registerallocation::Path& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::registerallocation::Empty>* AsynccodeGenRaw(::grpc::ClientContext* context, const ::registerallocation::ColorData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::registerallocation::Empty>* PrepareAsynccodeGenRaw(::grpc::ClientContext* context, const ::registerallocation::ColorData& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getGraphs_;
    const ::grpc::internal::RpcMethod rpcmethod_codeGen_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // RPC function to get interference graphs
    virtual ::grpc::Status getGraphs(::grpc::ServerContext* context, const ::registerallocation::Path* request, ::registerallocation::GraphList* response);
    // RPC function to send register color data for codegen
    virtual ::grpc::Status codeGen(::grpc::ServerContext* context, const ::registerallocation::ColorData* request, ::registerallocation::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGraphs() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphs(::grpc::ServerContext* /*context*/, const ::registerallocation::Path* /*request*/, ::registerallocation::GraphList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGraphs(::grpc::ServerContext* context, ::registerallocation::Path* request, ::grpc::ServerAsyncResponseWriter< ::registerallocation::GraphList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_codeGen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_codeGen() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_codeGen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status codeGen(::grpc::ServerContext* /*context*/, const ::registerallocation::ColorData* /*request*/, ::registerallocation::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcodeGen(::grpc::ServerContext* context, ::registerallocation::ColorData* request, ::grpc::ServerAsyncResponseWriter< ::registerallocation::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getGraphs<WithAsyncMethod_codeGen<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getGraphs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::registerallocation::Path, ::registerallocation::GraphList>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::registerallocation::Path* request, ::registerallocation::GraphList* response) { return this->getGraphs(context, request, response); }));}
    void SetMessageAllocatorFor_getGraphs(
        ::grpc::experimental::MessageAllocator< ::registerallocation::Path, ::registerallocation::GraphList>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::registerallocation::Path, ::registerallocation::GraphList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphs(::grpc::ServerContext* /*context*/, const ::registerallocation::Path* /*request*/, ::registerallocation::GraphList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getGraphs(
      ::grpc::CallbackServerContext* /*context*/, const ::registerallocation::Path* /*request*/, ::registerallocation::GraphList* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getGraphs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::registerallocation::Path* /*request*/, ::registerallocation::GraphList* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_codeGen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_codeGen() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::registerallocation::ColorData, ::registerallocation::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::registerallocation::ColorData* request, ::registerallocation::Empty* response) { return this->codeGen(context, request, response); }));}
    void SetMessageAllocatorFor_codeGen(
        ::grpc::experimental::MessageAllocator< ::registerallocation::ColorData, ::registerallocation::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::registerallocation::ColorData, ::registerallocation::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_codeGen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status codeGen(::grpc::ServerContext* /*context*/, const ::registerallocation::ColorData* /*request*/, ::registerallocation::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* codeGen(
      ::grpc::CallbackServerContext* /*context*/, const ::registerallocation::ColorData* /*request*/, ::registerallocation::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* codeGen(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::registerallocation::ColorData* /*request*/, ::registerallocation::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_getGraphs<ExperimentalWithCallbackMethod_codeGen<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_getGraphs<ExperimentalWithCallbackMethod_codeGen<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGraphs() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphs(::grpc::ServerContext* /*context*/, const ::registerallocation::Path* /*request*/, ::registerallocation::GraphList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_codeGen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_codeGen() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_codeGen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status codeGen(::grpc::ServerContext* /*context*/, const ::registerallocation::ColorData* /*request*/, ::registerallocation::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGraphs() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphs(::grpc::ServerContext* /*context*/, const ::registerallocation::Path* /*request*/, ::registerallocation::GraphList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGraphs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_codeGen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_codeGen() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_codeGen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status codeGen(::grpc::ServerContext* /*context*/, const ::registerallocation::ColorData* /*request*/, ::registerallocation::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcodeGen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getGraphs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGraphs(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphs(::grpc::ServerContext* /*context*/, const ::registerallocation::Path* /*request*/, ::registerallocation::GraphList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getGraphs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getGraphs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_codeGen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_codeGen() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->codeGen(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_codeGen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status codeGen(::grpc::ServerContext* /*context*/, const ::registerallocation::ColorData* /*request*/, ::registerallocation::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* codeGen(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* codeGen(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGraphs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGraphs() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::registerallocation::Path, ::registerallocation::GraphList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::registerallocation::Path, ::registerallocation::GraphList>* streamer) {
                       return this->StreamedgetGraphs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGraphs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGraphs(::grpc::ServerContext* /*context*/, const ::registerallocation::Path* /*request*/, ::registerallocation::GraphList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGraphs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::registerallocation::Path,::registerallocation::GraphList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_codeGen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_codeGen() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::registerallocation::ColorData, ::registerallocation::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::registerallocation::ColorData, ::registerallocation::Empty>* streamer) {
                       return this->StreamedcodeGen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_codeGen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status codeGen(::grpc::ServerContext* /*context*/, const ::registerallocation::ColorData* /*request*/, ::registerallocation::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcodeGen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::registerallocation::ColorData,::registerallocation::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getGraphs<WithStreamedUnaryMethod_codeGen<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getGraphs<WithStreamedUnaryMethod_codeGen<Service > > StreamedService;
};

}  // namespace registerallocation


#endif  // GRPC_RegisterAllocation_2eproto__INCLUDED
